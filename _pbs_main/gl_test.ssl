
//import variable gecko_percy_box;

#include "sfall.h"
#include "define_lite.h"
#include "lib.arrays.h"
#include "lib.strings.h"
#include "lib.inven.h"
#include "mod.h"
#include "..\headers\aipacket.h"
#include "..\headers\teams.h"
//#include "traps.h"

#include "tests\_arrays_test.ssl"
//#include "_dialogs_test.ssl"

variable victim := 0;
variable key_1 := false;
variable cursor_obj := 0;

variable iii := 0;

variable ary;




procedure set_item_count(variable invenobj, variable itempid, variable newcount, variable wield)
begin
   variable begin
      count;
      item;
   end
   count := obj_is_carrying_obj_pid(invenobj, itempid);
   if (newcount > count) then begin
      item := create_object_sid(itempid, 0, 0, -1);
      add_mult_objs_to_inven(invenobj, item, newcount - count);
      if (wield) then wield_obj_critter(invenobj, item);
   end else if (newcount < count) then begin
      count := rm_mult_objs_from_inven(invenobj, obj_carrying_pid_obj(invenobj, itempid), count - newcount);
      destroy_object(item);
   end
end

procedure testret(variable a) begin
   if (a==1) then return 111;
   if (a==2) then return 222;
   if (a==3) then return 333;
   return "nope";
end

procedure how_many_misc begin
   return len_array(list_as_array(LIST_MISC));
end

procedure skip_call(variable adr) begin
   variable i := 0;
   while (i<5) do begin
      write_byte(adr+i, 0x90);
      i++;
   end
end


variable objs;
variable arr;

procedure combatdamage_handler begin
   display_msg("combat damage " + debug_array_str(get_sfall_args));
end

procedure to_hit_hook begin
   display_msg("gl_test to_hit_hook "+get_sfall_arg);
   set_sfall_return(10);
end

procedure keypress_handler begin
   display_msg("gl_test key "+get_sfall_arg+" "+get_sfall_arg+" "+get_sfall_arg);
end

variable guard;

procedure mouseclick_handler begin
   if (get_sfall_arg and get_sfall_arg == 1) then begin
      if (key_pressed(DIK_RCONTROL)) then begin
         display_msg("\n"+tile_under_cursor+"\n");
      end
      
   end
end


procedure skill_handler begin
   variable args := get_sfall_args;
   display_msg("gl_test skill "+debug_array_str(get_sfall_args));
   if (args[2] == SKILL_FIRST_AID) then begin
      critter_heal(dude_obj, -10);
      set_sfall_return(0);
   end
end

procedure steal_handler begin
   display_msg("gl_test steal "+debug_array_str(get_sfall_args));
   set_sfall_return(1);
end

procedure useobjon_handler begin
   display_msg("gl_test useobjon "+debug_array_str(get_sfall_args) + " mode "+get_game_mode);
end

procedure perception_handler begin
   set_sfall_return(0);
end


procedure apcost_handler begin
   variable args := get_sfall_args, item;
   
   display_msg("gl_test calcapcost "+debug_array_str(args));
   /*item := item_by_attack_type(args[0], args[1]);
   if (obj_item_subtype(item) != item_type_weapon) then begin
      set_sfall_return(4);
   end*/
end

procedure test_weapon_anim(variable critterPid, variable itemPid) begin
   variable obj, item;
   obj := create_object_sid(critterPid, dude_tile - 8, dude_elevation, -1);
   item := add_item_pid(obj, itemPid);
   wield_obj_critter(obj, item);
   attack_setup(obj, dude_obj);
end

procedure get_nearest_critter begin
   variable k, v, obj, nearest;
   k := 99999;   
   v := list_begin(LIST_CRITTERS);
   obj := list_next(v);
   while (obj) do begin
      if (obj != dude_obj and tile_distance_objs(obj, dude_obj) < k) then begin
         nearest := obj;
         k := tile_distance_objs(obj, dude_obj);
      end
      obj := list_next(v);
   end
   list_end(v);
   return nearest;
end


//export variable from_test := 555;
//import variable bishop_stair_guard_obj;

//import procedure testexport111(variable a);
import procedure testexport000;
import procedure exportdude(variable A);

variable seen;

procedure start begin
   
  if game_loaded then begin
   variable s := "";
   variable obj;
   variable item;
   variable i, k, v;
   variable temp, coll;
   
  display_msg("gl_test start (loaded)" "wtf" );
  
  //call test_weapon_anim(16777434, PID_10MM_SMG);
  
   /*obj := create_object(PID_HUNTING_RIFLE, dude_tile-202, dude_elevation);  
   obj := create_object(PID_PLASMA_RIFLE, dude_tile-204, dude_elevation);  
   obj := create_object(PID_ROCKET_LAUNCHER, dude_tile-206, dude_elevation);  
   obj := create_object(PID_ASSAULT_RIFLE, dude_tile-2, dude_elevation);
   obj := create_object(PID_COMBAT_SHOTGUN, dude_tile-4, dude_elevation);
   obj := create_object(PID_SHOTGUN, dude_tile-6, dude_elevation);*/
   //anim(dude_obj, ANIM_fall_back_sf, 2);
   //anim(dude_obj, ANIMATE_ROTATION, 3);
   //anim(obj, ANIMATE_ROTATION, 0);
   //test_suite_verbose := true;
   //call array_test_suite; 
   //call arrays_lib_tests; 
   //return;
   
   //display_msg("pow = "+(-4.0^22));
   //display_msg("round = "+round(5.5));
   
   /*s := "Super cool string!";
   foreach (k: v in {5: "what", 7: "the", 12: "goodness!"}) begin
      display_msg("i begin "+k+v);
      //if (k == 7) then break;
      //if (k == 7) then continue;
      display_msg("i end "+i);
   end
   display_msg("loop end");*/
   
   // WARNING! DANGEROUS CODE!
   // call _PURGE_all_saved_arrays;
   // WARNING! End of dangerous code
   
   /*temp := ["John", "Mike", "Kate", "Presley", "Rob", "Jim", "Steven", "Greg"];
   coll := create_array_map;
   for (i:=1; i<=7; i++) begin
      coll[i] := {
         "name":  array_random_value(temp), 
         "phone": random(10000, 99999), 
         "price": (random(1000, 9999) / 100.0), 
         "something": "else"
      };
   end
   call save_collection("people", coll);*/
   
   
   /*coll := load_collection("people");
   foreach (k: v in coll) 
      display_msg(""+k+": "+debug_array_str(v));
   
   unset_array(coll, 7);
   call save_collection("people", coll);*/
   
   
   //set_global_script_repeat(500);
   //register_hook_proc(HOOK_TOHIT, to_hit_hook);
   register_hook_proc(HOOK_MOUSECLICK, mouseclick_handler);
   //register_hook_proc(HOOK_COMBATDAMAGE, combatdamage_handler);
   //register_hook_proc(HOOK_CALCAPCOST, apcost_handler);
   //register_hook_proc(21, skill_handler);
   //register_hook_proc(22, steal_handler);
   //register_hook_proc(23, perception_handler);
   
   return;
   
   guard := get_nearest_critter();
   
   obj_set_light_level(dude_obj, 0, 0);
   
  end else begin
   /*if (bishop_stair_guard_obj) then begin
     guard := bishop_stair_guard_obj;
   end*/
   
   if (guard) then begin
      if (obj_can_see_obj(guard, dude_obj) != seen) then begin
         seen := obj_can_see_obj(guard, dude_obj);
         display_msg("rot "+(rotation_to_tile(tile_num(guard), tile_num(dude_obj)) - critter_facing_dir(guard))
         +", dist "+ tile_distance_objs(guard, dude_obj)
         +", see " + seen 
         +", sneak " + sneak_success
         +", PE "+get_critter_stat(guard, STAT_pe)
         +", light "+tile_light(elevation(dude_obj), tile_num(dude_obj)));
      end
   end
   
     s := "wtf";
     
     if (key_pressed(DIK_1) and (game_time-key_1)>50) then begin
      key_1 := game_time;
      
      
     end
     
     if (key_pressed(DIK_LCONTROL) and key_pressed(DIK_F2)) then begin
        if (not(key_1)) then begin
        
        
         temp := tile_num_in_direction(tile_num(dude_obj), 0, 9);
         for (i:=0; i<6; i++) begin
            create_object_sid(16777458, tile_num_in_direction(temp, i, random(1,2)), elevation(dude_obj), -1);
         end
         
        /*obj := create_object_sid(0x01000000+1, tile_num_in_direction(tile_num(dude_obj), 0, 7), elevation(dude_obj), -1);
         temp := tile_num_in_direction(tile_num(dude_obj), 0, 9);
         obj := create_object_sid(0x01000000+2, temp, elevation(dude_obj), -1);
         obj := create_object_sid(0x01000000+3, tile_num_in_direction(temp, 1, 1), elevation(dude_obj), -1);
         obj := create_object_sid(0x01000000+3, tile_num_in_direction(temp, 5, 1), elevation(dude_obj), -1);
         
         
         call set_item_count(dude_obj, PID_MINIGUN, 1, 1);*/
            //call set_item_count(dude_obj, PID_CHEEZY_POOFS, 1, 1);
            //critter_mod_skill(dude_obj, SKILL_ENERGY_WEAPONS, 100);
            /*i := critter_facing_dir(dude_obj);
            obj := tile_get_next_critter(tile_num_in_direction(dude_tile, i, 2), dude_elevation, 0);
            if (obj) then begin
               s := create_object_sid(obj_pid(obj), tile_num_in_direction(dude_tile, i, 1), dude_elevation, -1);
               set_script(s, get_script(obj));
               move_obj_inven_to_obj(obj, s);
               //destroy_object(obj);
            end*/
         //attack_setup(obj, dude_obj);
         
         
         key_1 := true;
      end
   end
   
   // follow cursor
   //if (combat_is_initialized) then begin
      /*if (cursor_obj == 0) then begin
         cursor_obj := create_object_sid(PID_STEAM_2, 0, 0, -1);
         move_to(cursor_obj, tile_under_cursor, elevation(dude_obj));
         reg_anim_combat_check(0);
         reg_anim_begin();
         reg_anim_animate_forever(cursor_obj, 0);
         reg_anim_end();
         game_ui_enable;
      end*/
   //end
   
   //reg_anim_change_fid(0, 0, 0); // refresh display
   //if (i) then   display_msg("cr: "+proto_data(obj_pid(i), cr_name));
     
  end
end


procedure map_enter_p_proc begin
   display_msg("Map enter gl_test " + cur_town);
end

procedure map_update_p_proc begin
   //display_msg("Map update gl_test");
end

procedure map_exit_p_proc begin
   //display_msg("Map exit gl_test");
end